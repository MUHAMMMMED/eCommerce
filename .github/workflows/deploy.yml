name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Check out the code
        uses: actions/checkout@v4
        # This step checks out the code from the repository so that we can work with it

      # Step 2: Set up Docker Buildx, which is required for advanced Docker builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # This step sets up Docker Buildx to support advanced Docker builds

      # Step 3: Log in to Docker Hub using credentials stored in GitHub Secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # This step logs in to Docker Hub to allow pushing images to your repository

      # Step 4: Create .env file for all environment variables
      - name: Create .env file
        run: |
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env  # Add POSTGRES_DB to .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env  # Add POSTGRES_USER to .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env  # Add POSTGRES_PASSWORD to .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env  # Add SECRET_KEY to .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env  # Add DEBUG to .env
          echo "STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}" >> .env  # Add STRIPE_API_KEY to .env
          echo "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}" >> .env  # Add STRIPE_WEBHOOK_SECRET to .env
        # This step creates a .env file with sensitive environment variables required for the builds

      # Step 5: Build and push the backend Docker image
      - name: Build and Push backend Docker image
        env:
          REPOSITORY: backend
          IMAGE_TAG: latest
        run: |
          # Build the Docker image for the backend service
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$REPOSITORY:$IMAGE_TAG -f backend/Dockerfile backend/
          if [ $? -ne 0 ]; then
            echo "Backend Docker image build failed"
            exit 1
          fi
          # Push the backend Docker image to Docker Hub
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$REPOSITORY:$IMAGE_TAG
          if [ $? -ne 0 ]; then
            echo "Backend Docker image push failed"
            exit 1
          fi
        # This step builds the Docker image for the backend service and pushes it to Docker Hub

      # Step 6: Build and push the frontend Docker image
      - name: Build and Push frontend Docker image
        env:
          REPOSITORY: frontend
          IMAGE_TAG: latest
        run: |
          # Build the Docker image for the frontend service
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/$REPOSITORY:$IMAGE_TAG -f frontend/Dockerfile frontend/
          if [ $? -ne 0 ]; then
            echo "Frontend Docker image build failed"
            exit 1
          fi
          # Push the frontend Docker image to Docker Hub
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$REPOSITORY:$IMAGE_TAG
          if [ $? -ne 0 ]; then
            echo "Frontend Docker image push failed"
            exit 1
          fi
        # This step builds the Docker image for the frontend service and pushes it to Docker Hub